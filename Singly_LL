#include<stdio.h>
#include<stdlib.h>
typedef struct nodeType
{
    int info;
    struct nodeType *next;
}node;
void insertionAtBegin(node **,int);
void traversal(node *);
void insertionAtEnd(node **,int);
void deleteFromBegining(node **);
void deleteFromEnd(node** );
void insertionAfterBreak(node *,int ,int);
node *linearSearch(node* ,int );
int main()
{   int n,item,after;
    node *head=NULL;
    while(1)
    {   printf("enter the code for operation");
        scanf("%d",&n);
        switch(n)
        {
            case 1:
            printf("enter the value to store");
            scanf("%d",&item);
            insertionAtBegin(&head,item);
            break;
            case 2:
            traversal(head);
            break;
            case 3:
            printf("enter the value to store");
            scanf("%d",&item);
            insertionAtEnd(&head,item);
            break;
            case 4:
            deleteFromBegining(&head);
            break;
            case 5:
            deleteFromEnd(&head);
            break;
            case 6:
            printf("enter value after which to insert");
            scanf("%d",&after);
            printf("enter the value to store");
            scanf("%d",&item);
            insertionAfterBreak(head,after,item);
            break;
            default:
            exit(0);
        }
    }
    return 0;
}
void insertionAtBegin(node **head,int item)
{
   node *ptr;
   ptr=(node *)malloc(sizeof(node));
   ptr->info=item;
   if(*head==NULL)
   ptr->next=NULL;
   else
   ptr->next=*head;
   *head=ptr;
}
void traversal(node *head)
{
    node *ptr;
    ptr=head;
    while(ptr!=NULL)
    {
        printf("%d\n",ptr->info);
        ptr=ptr->next;
    }
}
void insertionAtEnd(node **head,int item)
{
   node *ptr;
   ptr=(node *)malloc(sizeof(node));
   ptr->info=item;
   ptr->next=NULL;
   if(*head==NULL)
   *head=ptr;
   else
    {
        node *loc;
        loc=*head;
        while(loc->next!=NULL)
        loc=loc->next;
        loc->next=ptr;
    }
}
void deleteFromBegining(node **head)
{
    node *temp;
    temp=*head;
    (*head)=(*head)->next;
    free(temp);
}
void deleteFromEnd(node** head)
{
    node *temp,*ptr;
    if((*head)->next==NULL)
    {
        free(head);
        head=NULL;
    }
    else
    {  
        ptr = *head;   
        while(ptr->next != NULL)  
        {  
            temp = ptr;  
            ptr = ptr ->next;  
        }  
        temp->next = NULL;  
        free(ptr); 
    }  
}
void insertionAfterBreak(node *head,int after,int item)
{
 node *loc=linearSearch(head,after);
 node *ptr=(node *)malloc(sizeof(node));
 ptr->info=item;
 ptr->next=loc->next;
 loc->next=ptr;
}
node *linearSearch(node* head,int after)
{   node *ptr;
    ptr=head;
    while(ptr->next!=NULL)
    {
        if(ptr->info==after)
        {
            return ptr;
        }
        ptr=ptr->next;
    }
}
